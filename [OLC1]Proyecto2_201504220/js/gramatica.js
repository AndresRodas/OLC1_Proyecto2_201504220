/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,3],$V1=[1,3],$V2=[5,6],$V3=[1,18],$V4=[1,16],$V5=[2,13],$V6=[1,21],$V7=[1,19],$V8=[1,20],$V9=[1,22],$Va=[1,23],$Vb=[1,26],$Vc=[1,25],$Vd=[2,9],$Ve=[1,38],$Vf=[1,35],$Vg=[1,33],$Vh=[1,34],$Vi=[1,36],$Vj=[1,37],$Vk=[1,41],$Vl=[2,6,9,12,16,27,31,33,34,35,46,47,48,49,50,51,52,60,78,79,80,84],$Vm=[1,56],$Vn=[1,55],$Vo=[1,73],$Vp=[1,75],$Vq=[1,68],$Vr=[1,74],$Vs=[1,76],$Vt=[1,77],$Vu=[2,29],$Vv=[1,84],$Vw=[1,85],$Vx=[1,86],$Vy=[18,19,56,57,58],$Vz=[18,19,56,57,58,62,63,64,65,66,67],$VA=[18,19,56,57,58,62,63,64,65,66,67,69,70,71,72],$VB=[18,19,56,57,58,62,63,64,65,66,67,69,70,71,72,74,75],$VC=[1,125],$VD=[1,129],$VE=[1,126],$VF=[1,127],$VG=[1,128],$VH=[2,94],$VI=[1,139],$VJ=[1,155],$VK=[2,48],$VL=[1,152],$VM=[1,153],$VN=[1,154],$VO=[1,156],$VP=[1,157],$VQ=[1,158],$VR=[1,159],$VS=[1,160],$VT=[2,6,12,27,31,33,34,35],$VU=[2,9,12,16,27,31,33,34,35,46,47,48,49,50,51,52,60,78,79,80,84],$VV=[1,218],$VW=[2,54],$VX=[1,224];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"TODO":4,"EOF":5,"Rpublic":6,"S":7,"Rclass":8,"Identificador":9,"LAbre":10,"CONTCLASS":11,"LCierra":12,"Rinterfaz":13,"CONTINTER":14,"TIPO":15,"PAbre":16,"NEXTFUNC":17,"PCierra":18,"Pyc":19,"CCN":20,"DECLARACION":21,"MAIN":22,"FUNCION":23,"Rstatic":24,"Rvoid":25,"Rmain":26,"Rstring":27,"CAbre":28,"CCierra":29,"INSTRUCCIONES":30,"Rint":31,"NEXTDEC":32,"Rdouble":33,"Rchar":34,"Rboolean":35,"SIgual":36,"FINDEC":37,"EXP":38,"Texto":39,"PARAMETROS":40,"NEXTPARAM":41,"SComa":42,"CICLO":43,"CONTROL":44,"PRINT":45,"Rreturn":46,"Rbreak":47,"Rcontinue":48,"Rfor":49,"Rwhile":50,"Rdo":51,"Rif":52,"ELSE":53,"Relse":54,"ELSEIF":55,"Or":56,"And":57,"Xor":58,"P":59,"Not":60,"R":61,"SMayor":62,"SMenor":63,"SMayorIgual":64,"SMenorIgual":65,"SComp":66,"SDif":67,"E":68,"SMas":69,"SMenos":70,"SInc":71,"SDec":72,"T":73,"SPor":74,"SDiv":75,"F":76,"IDN":77,"Numero":78,"Rtrue":79,"Rfalse":80,"NEXTCALL":81,"RECIBE":82,"NEXTRECIBE":83,"Rsystem":84,"SPunto":85,"Rout":86,"SALIDA":87,"Rprint":88,"MSG":89,"Rprintln":90,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"Rpublic",8:"Rclass",9:"Identificador",10:"LAbre",12:"LCierra",13:"Rinterfaz",16:"PAbre",18:"PCierra",19:"Pyc",24:"Rstatic",25:"Rvoid",26:"Rmain",27:"Rstring",28:"CAbre",29:"CCierra",31:"Rint",33:"Rdouble",34:"Rchar",35:"Rboolean",36:"SIgual",39:"Texto",42:"SComa",46:"Rreturn",47:"Rbreak",48:"Rcontinue",49:"Rfor",50:"Rwhile",51:"Rdo",52:"Rif",54:"Relse",56:"Or",57:"And",58:"Xor",60:"Not",62:"SMayor",63:"SMenor",64:"SMayorIgual",65:"SMenorIgual",66:"SComp",67:"SDif",69:"SMas",70:"SMenos",71:"SInc",72:"SDec",74:"SPor",75:"SDiv",78:"Numero",79:"Rtrue",80:"Rfalse",84:"Rsystem",85:"SPunto",86:"Rout",88:"Rprint",90:"Rprintln"},
productions_: [0,[3,2],[4,3],[4,0],[7,5],[7,5],[7,2],[14,8],[14,2],[14,0],[11,2],[11,2],[11,2],[11,0],[20,2],[20,2],[22,12],[21,3],[21,3],[21,3],[21,3],[21,3],[21,2],[32,2],[32,1],[37,2],[37,2],[23,8],[17,1],[17,0],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[40,3],[41,2],[41,0],[30,2],[30,2],[30,3],[30,2],[30,2],[30,4],[30,3],[30,3],[30,2],[30,0],[43,10],[43,7],[43,9],[44,8],[53,6],[53,0],[55,4],[55,0],[38,3],[38,3],[38,3],[38,1],[59,2],[59,1],[61,3],[61,3],[61,3],[61,3],[61,3],[61,3],[61,1],[68,3],[68,3],[68,2],[68,2],[68,1],[73,3],[73,3],[73,1],[76,2],[76,1],[76,3],[76,1],[76,1],[77,3],[77,3],[77,0],[81,1],[81,0],[82,2],[82,2],[82,2],[82,2],[82,2],[83,2],[83,0],[45,5],[87,5],[87,5],[89,1],[89,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = new Nodo('RAIZ','');
                this.$.addHijo($$[$0-1]);
                //let temp = new Recorrer(this.$);
                this.$.addTokens(tk_tokens);
                this.$.addErrores(tk_errores);
                tk_tokens = []
                tk_errores = []
                return this.$;
                
break;
case 2:
this.$ = new Nodo('INICIO','');
                        this.$.addHijo(new Nodo($$[$0-2],'Rpublic'));
                        this.$.addHijo($$[$0-1]);
                        this.$.addHijo($$[$0]);
                        
break;
case 4:
this.$ = new Nodo('S','');
                                                this.$.addHijo(new Nodo($$[$0-4],'Rinterfaz'));
                                                this.$.addHijo(new Nodo($$[$0-3],'Identificador'));
                                                this.$.addHijo(new Nodo($$[$0-2],'LAbre'));
                                                this.$.addHijo($$[$0-1]);
                                                this.$.addHijo(new Nodo($$[$0],'LCierra'));
                                                
break;
case 5:
this.$ = new Nodo('S','');
                                                    this.$.addHijo(new Nodo($$[$0-4],'Rinterfaz'));
                                                    this.$.addHijo(new Nodo($$[$0-3],'Identificador'));
                                                    this.$.addHijo(new Nodo($$[$0-2],'LAbre'));
                                                    this.$.addHijo($$[$0-1]);
                                                    this.$.addHijo(new Nodo($$[$0],'LCierra'));
                                                    
break;
case 6:

                        tk_errores.push({linea:this._$.first_line, columna:this._$.first_column,tipo:'Sintactico',descripcion:'Se esperaba: Rclass y se encontró: '+yytext});
                        console.log('Error sintactico en linea: '+this._$.first_line + ', y columna: '+this._$.first_column);
                        
break;
case 7:
this.$ = new Nodo('CONTINTER','');
                                                                            this.$.addHijo(new Nodo($$[$0-7],'Rpublic'));
                                                                            this.$.addHijo($$[$0-6]);
                                                                            this.$.addHijo(new Nodo($$[$0-5],'Identificador'));
                                                                            this.$.addHijo(new Nodo($$[$0-4],'PAbre'));
                                                                            this.$.addHijo($$[$0-3]);
                                                                            this.$.addHijo(new Nodo($$[$0-2],'PCierra'));
                                                                            this.$.addHijo(new Nodo($$[$0-1],'Pyc'));
                                                                            this.$.addHijo($$[$0]);
                                                                            
break;
case 8:

                                tk_errores.push({linea:this._$.first_line, columna:this._$.first_column,tipo:'Sintactico',descripcion:'Se esperaba: Rclass y se encontró: '+yytext});
                                console.log('Error sintactico en linea: '+this._$.first_line + ', y columna: '+this._$.first_column);
                                
break;
case 10:
this.$ = new Nodo('CONTCLASS','');
                            this.$.addHijo(new Nodo($$[$0-1],'Rpublic'));
                            this.$.addHijo($$[$0]);
                            
break;
case 11:
this.$ = new Nodo('CONTCLASS','');
                                    this.$.addHijo($$[$0-1]);
                                    this.$.addHijo($$[$0]);
                                    
break;
case 12:

                                tk_errores.push({linea:this._$.first_line, columna:this._$.first_column,tipo:'Sintactico',descripcion:'Se esperaba: DECLARACION y se encontró: '+yytext});
                                console.log('Error sintactico en linea: '+this._$.first_line + ', y columna: '+this._$.first_column);
                                
break;
case 14:
this.$ = new Nodo('CCN','');
                    this.$.addHijo($$[$0-1]);
                    this.$.addHijo($$[$0]);
                    
break;
case 15:
this.$ = new Nodo('CCN','');
                        this.$.addHijo($$[$0-1]);
                        this.$.addHijo($$[$0]);
                        
break;
case 16:
this.$ = new Nodo('MAIN','');
                                                                                                        this.$.addHijo(new Nodo($$[$0-11],'Rstatic'));
                                                                                                        this.$.addHijo(new Nodo($$[$0-10],'Rvoid'));
                                                                                                        this.$.addHijo(new Nodo($$[$0-9],'Rmain'));
                                                                                                        this.$.addHijo(new Nodo($$[$0-8],'PAbre'));
                                                                                                        this.$.addHijo(new Nodo($$[$0-7],'Rstring'));
                                                                                                        this.$.addHijo(new Nodo($$[$0-6],'CAbre'));
                                                                                                        this.$.addHijo(new Nodo($$[$0-5],'CCierra'));
                                                                                                        this.$.addHijo(new Nodo($$[$0-4],'Identificador'));
                                                                                                        this.$.addHijo(new Nodo($$[$0-3],'PCierra'));
                                                                                                        this.$.addHijo(new Nodo($$[$0-2],'LAbre'));
                                                                                                        this.$.addHijo($$[$0-1]);
                                                                                                        this.$.addHijo(new Nodo($$[$0],'LCierra'));
                                                                                                        
break;
case 17:
this.$ = new Nodo('DECLARACION','');
                                        this.$.addHijo(new Nodo($$[$0-2],'Rint'));
                                        this.$.addHijo(new Nodo($$[$0-1],'Identificador'));
                                        this.$.addHijo($$[$0]);
                                        
break;
case 18:
this.$ = new Nodo('DECLARACION','');
                                        this.$.addHijo(new Nodo($$[$0-2],'Rdouble'));
                                        this.$.addHijo(new Nodo($$[$0-1],'Identificador'));
                                        this.$.addHijo($$[$0]);
                                        
break;
case 19:
this.$ = new Nodo('DECLARACION','');
                                        this.$.addHijo(new Nodo($$[$0-2],'Rstring'));
                                        this.$.addHijo(new Nodo($$[$0-1],'Identificador'));
                                        this.$.addHijo($$[$0]);
                                        
break;
case 20:
this.$ = new Nodo('DECLARACION','');
                                        this.$.addHijo(new Nodo($$[$0-2],'Rchar'));
                                        this.$.addHijo(new Nodo($$[$0-1],'Identificador'));
                                        this.$.addHijo($$[$0]);
                                        
break;
case 21:
this.$ = new Nodo('DECLARACION','');
                                        this.$.addHijo(new Nodo($$[$0-2],'Rboolean'));
                                        this.$.addHijo(new Nodo($$[$0-1],'Identificador'));
                                        this.$.addHijo($$[$0]);
                                        
break;
case 22:

                                tk_errores.push({linea:yylloc.first_line, columna:yylloc.first_column,texto:yytext});
                                console.log('Error sintactico en linea: '+this._$.first_line + ', y columna: '+this._$.first_column);
                                
break;
case 23:
this.$ = new Nodo('NEXT-DEC','');
                        this.$.addHijo(new Nodo($$[$0-1],'SIgual'));
                        this.$.addHijo($$[$0]);
                        
break;
case 24:
this.$ = new Nodo('NEXT-DEC','');
            this.$.addHijo(new Nodo($$[$0],'Pyc'));
            
break;
case 25:
this.$ = new Nodo('FIN-DEC','');
                this.$.addHijo($$[$0-1]);
                this.$.addHijo(new Nodo($$[$0],'Pyc'));
                
break;
case 26:
this.$ = new Nodo('FIN-DEC','');
                this.$.addHijo(new Nodo($$[$0-1],'Texto'));
                this.$.addHijo(new Nodo($$[$0],'Pyc'));
                
break;
case 27:
this.$ = new Nodo('FUNCION','');
                                                                                this.$.addHijo($$[$0-7]);
                                                                                this.$.addHijo(new Nodo($$[$0-6],'Identificador'));
                                                                                this.$.addHijo(new Nodo($$[$0-5],'PAbre'));
                                                                                this.$.addHijo($$[$0-4]);
                                                                                this.$.addHijo(new Nodo($$[$0-3],'PCierra'));
                                                                                this.$.addHijo(new Nodo($$[$0-2],'LAbre'));
                                                                                this.$.addHijo($$[$0-1]);
                                                                                this.$.addHijo(new Nodo($$[$0],'LCierra'));
                                                                                
break;
case 28:
this.$ = new Nodo('NEXT-FUNC','');
                       this.$.addHijo($$[$0]);
                       
break;
case 30:
this.$ = new Nodo('FUNCION','');
            this.$.addHijo(new Nodo($$[$0],'Rint'));
break;
case 31:
this.$ = new Nodo('FUNCION','');
            this.$.addHijo(new Nodo($$[$0],'Rdouble'));
break;
case 32:
this.$ = new Nodo('FUNCION','');
            this.$.addHijo(new Nodo($$[$0],'Rstring'));
break;
case 33:
this.$ = new Nodo('FUNCION','');
            this.$.addHijo(new Nodo($$[$0],'Rchar'));
break;
case 34:
this.$ = new Nodo('FUNCION','');
            this.$.addHijo(new Nodo($$[$0],'Rboolean'));
break;
case 35:
this.$ = new Nodo('FUNCION','');
            this.$.addHijo(new Nodo($$[$0],'Rvoid'));
            
break;
case 36:
this.$ = new Nodo('PARAMETROS','');
                                        this.$.addHijo($$[$0-2]);
                                        this.$.addHijo(new Nodo($$[$0-1],''));
                                        this.$.addHijo($$[$0]);
                                        
break;
case 37:
this.$ = new Nodo('NEXT-PARAM','');
                                this.$.addHijo(new Nodo($$[$0-1],''));
                                this.$.addHijo($$[$0]);
                                
break;
case 39: case 40: case 42: case 43:
this.$ = new Nodo('INSTRUCCIONES','');
                                    this.$.addHijo($$[$0-1]);
                                    this.$.addHijo($$[$0]);
                                    
break;
case 41:
this.$ = new Nodo('INSTRUCCIONES','');
                                    this.$.addHijo($$[$0-2]);
                                    this.$.addHijo(new Nodo($$[$0-1],''));
                                    this.$.addHijo($$[$0]);
                                    
break;
case 44:
this.$ = new Nodo('INSTRUCCIONES','');
                                    this.$.addHijo(new Nodo($$[$0-3],''));
                                    this.$.addHijo($$[$0-2]);
                                    this.$.addHijo(new Nodo($$[$0-1],''));
                                    this.$.addHijo($$[$0]);
                                    
break;
case 45: case 46:
this.$ = new Nodo('INSTRUCCIONES','');
                                    this.$.addHijo(new Nodo($$[$0-2],''));
                                    this.$.addHijo(new Nodo($$[$0-1],''));
                                    this.$.addHijo($$[$0]);
                                    
break;
case 47:

                                tk_errores.push({linea:this._$.first_line, columna:this._$.first_column,tipo:'Sintactico',descripcion:'Se esperaba: INSTRUCCION y se encontró: '+yytext});
                                console.log('Error sintactico en linea: '+this._$.first_line + ', y columna: '+this._$.first_column);
                                
break;
case 49:
this.$ = new Nodo('CICLO','');
                                    this.$.addHijo(new Nodo($$[$0-9],''));
                                    this.$.addHijo(new Nodo($$[$0-8],''));
                                    this.$.addHijo($$[$0-7]);
                                    this.$.addHijo($$[$0-6]);
                                    this.$.addHijo(new Nodo($$[$0-5],''));
                                    this.$.addHijo($$[$0-4]);
                                    this.$.addHijo(new Nodo($$[$0-3],''));
                                    this.$.addHijo(new Nodo($$[$0-2],''));
                                    this.$.addHijo($$[$0-1]);
                                    this.$.addHijo(new Nodo($$[$0],''));
                                    
break;
case 50:
this.$ = new Nodo('CICLO','');
                                    this.$.addHijo(new Nodo($$[$0-6],''));
                                    this.$.addHijo(new Nodo($$[$0-5],''));
                                    this.$.addHijo($$[$0-4]);
                                    this.$.addHijo(new Nodo($$[$0-3],''));
                                    this.$.addHijo(new Nodo($$[$0-2],''));
                                    this.$.addHijo($$[$0-1]);
                                    this.$.addHijo(new Nodo($$[$0],''));
                                    
break;
case 51:
this.$ = new Nodo('CICLO','');
                                    this.$.addHijo(new Nodo($$[$0-8],''));
                                    this.$.addHijo(new Nodo($$[$0-7],''));
                                    this.$.addHijo($$[$0-6]);
                                    this.$.addHijo(new Nodo($$[$0-5],''));
                                    this.$.addHijo(new Nodo($$[$0-4],''));
                                    this.$.addHijo(new Nodo($$[$0-3],''));
                                    this.$.addHijo($$[$0-2]);
                                    this.$.addHijo(new Nodo($$[$0-1],''));
                                    this.$.addHijo(new Nodo($$[$0],''));
                                    
break;
case 52:
this.$ = new Nodo('CONTROL','');
                                    this.$.addHijo(new Nodo($$[$0-7],''));
                                    this.$.addHijo(new Nodo($$[$0-6],''));
                                    this.$.addHijo($$[$0-5]);
                                    this.$.addHijo(new Nodo($$[$0-4],''));
                                    this.$.addHijo(new Nodo($$[$0-3],''));
                                    this.$.addHijo($$[$0-2]);
                                    this.$.addHijo(new Nodo($$[$0-1],''));
                                    this.$.addHijo($$[$0]);
                                    
break;
case 53:
this.$ = new Nodo('ELSE','');
                                    this.$.addHijo(new Nodo($$[$0-5],''));
                                    this.$.addHijo($$[$0-4]);
                                    this.$.addHijo(new Nodo($$[$0-3],''));
                                    this.$.addHijo($$[$0-2]);
                                    this.$.addHijo(new Nodo($$[$0-1],''));
                                    this.$.addHijo($$[$0]);
                                    
break;
case 55:
this.$ = new Nodo('ELSEIF','');
                                this.$.addHijo(new Nodo($$[$0-3],''));
                                this.$.addHijo(new Nodo($$[$0-2],''));
                                this.$.addHijo($$[$0-1]);
                                this.$.addHijo(new Nodo($$[$0],''));
                                
break;
case 57: case 58: case 59:
this.$ = new Nodo('EXP','');
                this.$.addHijo($$[$0-2]);
                this.$.addHijo(new Nodo($$[$0-1],''));
                this.$.addHijo($$[$0]);
                
break;
case 60:
this.$ = new Nodo('EXP','');
                this.$.addHijo($$[$0]);
                
break;
case 61:
this.$ = new Nodo('P','');
                this.$.addHijo(new Nodo($$[$0-1],''));
                this.$.addHijo($$[$0]);
                
break;
case 62:
this.$ = new Nodo('P','');
                this.$.addHijo($$[$0]);
                
break;
case 63: case 64: case 65: case 66: case 67: case 68:
this.$ = new Nodo('R','');
                this.$.addHijo($$[$0-2]);
                this.$.addHijo(new Nodo($$[$0-1],''));
                this.$.addHijo($$[$0]);
                
break;
case 69:
this.$ = new Nodo('R','');
                this.$.addHijo($$[$0]);
                
break;
case 70: case 71:
this.$ = new Nodo('E','');
                this.$.addHijo($$[$0-2]);
                this.$.addHijo(new Nodo($$[$0-1],''));
                this.$.addHijo($$[$0]);
                
break;
case 72: case 73:
this.$ = new Nodo('E','');
                this.$.addHijo($$[$0-1]);
                this.$.addHijo(new Nodo($$[$0],''));
                
break;
case 74:
this.$ = new Nodo('E','');
                this.$.addHijo($$[$0]);
                
break;
case 75: case 76:
this.$ = new Nodo('T','');
                this.$.addHijo($$[$0-2]);
                this.$.addHijo(new Nodo($$[$0-1],''));
                this.$.addHijo($$[$0]);
                
break;
case 77:
this.$ = new Nodo('T','');
                this.$.addHijo($$[$0]);
                
break;
case 78:
this.$ = new Nodo('F','');
                this.$.addHijo(new Nodo($$[$0-1],''));
                this.$.addHijo($$[$0]);
                
break;
case 79: case 81: case 82:
this.$ = new Nodo('F','');
                this.$.addHijo(new Nodo($$[$0],''));
                
break;
case 80:
this.$ = new Nodo('F','');
                this.$.addHijo(new Nodo($$[$0-2],''));
                this.$.addHijo($$[$0-1]);
                this.$.addHijo(new Nodo($$[$0],''));
                
break;
case 83: case 84:
this.$ = new Nodo('IDNT','');
                this.$.addHijo(new Nodo($$[$0-2],''));
                this.$.addHijo($$[$0-1]);
                this.$.addHijo(new Nodo($$[$0],''));
                
break;
case 86:
this.$ = new Nodo('NEXT-CALL','');
                this.$.addHijo($$[$0]);
                
break;
case 88: case 89: case 90: case 91:
this.$ = new Nodo('RECIBE','');
                this.$.addHijo(new Nodo($$[$0-1],''));
                this.$.addHijo($$[$0]);
                
break;
case 92:
this.$ = new Nodo('RECIBE','');
                this.$.addHijo(new Nodo($$[$0-1],'Texto'));
                this.$.addHijo($$[$0]);
                
break;
case 93:
this.$ = new Nodo('NEXT-RECIBE','');
                this.$.addHijo(new Nodo($$[$0-1],''));
                this.$.addHijo($$[$0]);
                
break;
case 95:
this.$ = new Nodo('PRINT','');
                this.$.addHijo(new Nodo($$[$0-4],''));
                this.$.addHijo(new Nodo($$[$0-3],''));
                this.$.addHijo(new Nodo($$[$0-2],''));
                this.$.addHijo(new Nodo($$[$0-1],''));
                this.$.addHijo($$[$0]);
                
break;
case 96: case 97:
this.$ = new Nodo('END-PRINT','');
                this.$.addHijo(new Nodo($$[$0-4],''));
                this.$.addHijo(new Nodo($$[$0-3],''));
                this.$.addHijo($$[$0-2]);
                this.$.addHijo(new Nodo($$[$0-1],''));
                this.$.addHijo(new Nodo($$[$0],''));
                
break;
case 98:
this.$ = new Nodo('MSG','Texto');
                this.$.addHijo(new Nodo($$[$0],''));
                
break;
case 99:
this.$ = new Nodo('MSG','');
                this.$.addHijo($$[$0]);
                
break;
}
},
table: [{3:1,4:2,5:$V0,6:$V1},{1:[3]},{5:[1,4]},{2:[1,8],7:5,8:[1,6],13:[1,7]},{1:[2,1]},{4:9,5:$V0,6:$V1},{9:[1,10]},{9:[1,11]},{12:[1,12]},{5:[2,2]},{10:[1,13]},{10:[1,14]},o($V2,[2,6]),{2:$V3,6:$V4,11:15,12:$V5,21:17,27:$V6,31:$V7,33:$V8,34:$V9,35:$Va},{2:$Vb,6:$Vc,12:$Vd,14:24},{12:[1,27]},{15:32,20:28,22:29,23:30,24:[1,31],25:$Ve,27:$Vf,31:$Vg,33:$Vh,34:$Vi,35:$Vj},{2:$V3,6:$V4,11:39,12:$V5,21:17,27:$V6,31:$V7,33:$V8,34:$V9,35:$Va},{12:$Vk,19:[1,40]},{9:[1,42]},{9:[1,43]},{9:[1,44]},{9:[1,45]},{9:[1,46]},{12:[1,47]},{15:48,25:$Ve,27:$Vf,31:$Vg,33:$Vh,34:$Vi,35:$Vj},{19:[1,49]},o($V2,[2,4]),{12:[2,10]},{2:$V3,6:$V4,11:50,12:$V5,21:17,27:$V6,31:$V7,33:$V8,34:$V9,35:$Va},{2:$V3,6:$V4,11:51,12:$V5,21:17,27:$V6,31:$V7,33:$V8,34:$V9,35:$Va},{25:[1,52]},{9:[1,53]},{9:[2,30]},{9:[2,31]},{9:[2,32]},{9:[2,33]},{9:[2,34]},{9:[2,35]},{12:[2,11]},{12:[2,12]},o($Vl,[2,22]),{19:$Vm,32:54,36:$Vn},{19:$Vm,32:57,36:$Vn},{19:$Vm,32:58,36:$Vn},{19:$Vm,32:59,36:$Vn},{19:$Vm,32:60,36:$Vn},o($V2,[2,5]),{9:[1,61]},{12:[2,8]},{12:[2,14]},{12:[2,15]},{26:[1,62]},{16:[1,63]},o($Vl,[2,17]),{9:$Vo,16:$Vp,37:64,38:65,39:[1,66],59:67,60:$Vq,61:69,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt},o($Vl,[2,24]),o($Vl,[2,18]),o($Vl,[2,19]),o($Vl,[2,20]),o($Vl,[2,21]),{16:[1,78]},{16:[1,79]},{15:82,17:80,18:$Vu,25:$Ve,27:$Vf,31:$Vg,33:$Vh,34:$Vi,35:$Vj,40:81},o($Vl,[2,23]),{19:[1,83],56:$Vv,57:$Vw,58:$Vx},{19:[1,87]},o($Vy,[2,60]),{9:$Vo,16:$Vp,38:88,59:67,60:$Vq,61:69,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt},o($Vy,[2,62],{62:[1,89],63:[1,90],64:[1,91],65:[1,92],66:[1,93],67:[1,94]}),o($Vz,[2,69],{69:[1,95],70:[1,96],71:[1,97],72:[1,98]}),o($VA,[2,74],{74:[1,99],75:[1,100]}),o($VB,[2,77]),o($VB,[2,85],{77:101,16:[1,103],36:[1,102]}),o($VB,[2,79]),{9:$Vo,16:$Vp,38:104,59:67,60:$Vq,61:69,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt},o($VB,[2,81]),o($VB,[2,82]),{15:82,17:105,18:$Vu,25:$Ve,27:$Vf,31:$Vg,33:$Vh,34:$Vi,35:$Vj,40:81},{27:[1,106]},{18:[1,107]},{18:[2,28]},{9:[1,108]},o($Vl,[2,25]),{9:$Vo,16:$Vp,38:109,59:67,60:$Vq,61:69,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt},{9:$Vo,16:$Vp,38:110,59:67,60:$Vq,61:69,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt},{9:$Vo,16:$Vp,38:111,59:67,60:$Vq,61:69,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt},o($Vl,[2,26]),o($Vy,[2,61]),{9:$Vo,16:$Vp,61:112,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt},{9:$Vo,16:$Vp,61:113,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt},{9:$Vo,16:$Vp,61:114,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt},{9:$Vo,16:$Vp,61:115,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt},{9:$Vo,16:$Vp,61:116,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt},{9:$Vo,16:$Vp,61:117,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt},{9:$Vo,16:$Vp,68:118,73:71,76:72,78:$Vr,79:$Vs,80:$Vt},{9:$Vo,16:$Vp,68:119,73:71,76:72,78:$Vr,79:$Vs,80:$Vt},o($VA,[2,72]),o($VA,[2,73]),{9:$Vo,16:$Vp,73:120,76:72,78:$Vr,79:$Vs,80:$Vt},{9:$Vo,16:$Vp,73:121,76:72,78:$Vr,79:$Vs,80:$Vt},o($VB,[2,78]),{9:$Vo,16:$Vp,38:122,59:67,60:$Vq,61:69,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt},{9:$VC,18:[2,87],39:$VD,78:$VE,79:$VF,80:$VG,81:123,82:124},{18:[1,130],56:$Vv,57:$Vw,58:$Vx},{18:[1,131]},{28:[1,132]},{10:[1,133]},{18:[2,38],41:134,42:[1,135]},o($Vy,[2,57]),o($Vy,[2,58]),o($Vy,[2,59]),o($Vz,[2,63]),o($Vz,[2,64]),o($Vz,[2,65]),o($Vz,[2,66]),o($Vz,[2,67]),o($Vz,[2,68]),o($VA,[2,70]),o($VA,[2,71]),o($VB,[2,75]),o($VB,[2,76]),{19:[1,136],56:$Vv,57:$Vw,58:$Vx},{18:[1,137]},{18:[2,86]},{18:$VH,42:$VI,83:138},{18:$VH,42:$VI,83:140},{18:$VH,42:$VI,83:141},{18:$VH,42:$VI,83:142},{18:$VH,42:$VI,83:143},o($VB,[2,80]),{19:[1,144]},{29:[1,145]},{2:$VJ,9:$Vo,12:$VK,16:$Vp,21:151,27:$V6,30:146,31:$V7,33:$V8,34:$V9,35:$Va,38:149,43:147,44:148,45:150,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,59:67,60:$Vq,61:69,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt,84:$VS},{18:[2,36]},{15:82,25:$Ve,27:$Vf,31:$Vg,33:$Vh,34:$Vi,35:$Vj,40:161},o($VB,[2,83]),o($VB,[2,84]),{18:[2,88]},{9:$VC,39:$VD,78:$VE,79:$VF,80:$VG,82:162},{18:[2,89]},{18:[2,90]},{18:[2,91]},{18:[2,92]},{2:$Vb,6:$Vc,12:$Vd,14:163},{9:[1,164]},{12:[1,165]},{2:$VJ,9:$Vo,12:$VK,16:$Vp,21:151,27:$V6,30:166,31:$V7,33:$V8,34:$V9,35:$Va,38:149,43:147,44:148,45:150,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,59:67,60:$Vq,61:69,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt,84:$VS},{2:$VJ,9:$Vo,12:$VK,16:$Vp,21:151,27:$V6,30:167,31:$V7,33:$V8,34:$V9,35:$Va,38:149,43:147,44:148,45:150,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,59:67,60:$Vq,61:69,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt,84:$VS},{19:[1,168],56:$Vv,57:$Vw,58:$Vx},{2:$VJ,9:$Vo,12:$VK,16:$Vp,21:151,27:$V6,30:169,31:$V7,33:$V8,34:$V9,35:$Va,38:149,43:147,44:148,45:150,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,59:67,60:$Vq,61:69,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt,84:$VS},{2:$VJ,9:$Vo,12:$VK,16:$Vp,21:151,27:$V6,30:170,31:$V7,33:$V8,34:$V9,35:$Va,38:149,43:147,44:148,45:150,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,59:67,60:$Vq,61:69,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt,84:$VS},{9:$Vo,16:$Vp,38:171,59:67,60:$Vq,61:69,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt},{19:[1,172]},{19:[1,173]},{12:$Vk,19:[1,174]},{16:[1,175]},{16:[1,176]},{10:[1,177]},{16:[1,178]},{85:[1,179]},{18:[2,37]},{18:[2,93]},{12:[2,7]},{18:[1,180]},o($VT,[2,27]),{12:[2,39]},{12:[2,40]},{2:$VJ,9:$Vo,12:$VK,16:$Vp,21:151,27:$V6,30:181,31:$V7,33:$V8,34:$V9,35:$Va,38:149,43:147,44:148,45:150,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,59:67,60:$Vq,61:69,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt,84:$VS},{12:[2,42]},{12:[2,43]},{19:[1,182],56:$Vv,57:$Vw,58:$Vx},{2:$VJ,9:$Vo,12:$VK,16:$Vp,21:151,27:$V6,30:183,31:$V7,33:$V8,34:$V9,35:$Va,38:149,43:147,44:148,45:150,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,59:67,60:$Vq,61:69,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt,84:$VS},{2:$VJ,9:$Vo,12:$VK,16:$Vp,21:151,27:$V6,30:184,31:$V7,33:$V8,34:$V9,35:$Va,38:149,43:147,44:148,45:150,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,59:67,60:$Vq,61:69,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt,84:$VS},{12:[2,47]},{2:[1,186],21:185,27:$V6,31:$V7,33:$V8,34:$V9,35:$Va},{9:$Vo,16:$Vp,38:187,59:67,60:$Vq,61:69,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt},{2:$VJ,9:$Vo,12:$VK,16:$Vp,21:151,27:$V6,30:188,31:$V7,33:$V8,34:$V9,35:$Va,38:149,43:147,44:148,45:150,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,59:67,60:$Vq,61:69,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt,84:$VS},{9:$Vo,16:$Vp,38:189,59:67,60:$Vq,61:69,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt},{86:[1,190]},{10:[1,191]},{12:[2,41]},{2:$VJ,9:$Vo,12:$VK,16:$Vp,21:151,27:$V6,30:192,31:$V7,33:$V8,34:$V9,35:$Va,38:149,43:147,44:148,45:150,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,59:67,60:$Vq,61:69,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt,84:$VS},{12:[2,45]},{12:[2,46]},{9:$Vo,16:$Vp,38:193,59:67,60:$Vq,61:69,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt},{12:$Vk},{18:[1,194],56:$Vv,57:$Vw,58:$Vx},{12:[1,195]},{18:[1,196],56:$Vv,57:$Vw,58:$Vx},{85:[1,197]},{2:$VJ,9:$Vo,12:$VK,16:$Vp,21:151,27:$V6,30:198,31:$V7,33:$V8,34:$V9,35:$Va,38:149,43:147,44:148,45:150,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,59:67,60:$Vq,61:69,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt,84:$VS},{12:[2,44]},{19:[1,199],56:$Vv,57:$Vw,58:$Vx},{10:[1,200]},{50:[1,201]},{10:[1,202]},{87:203,88:[1,204],90:[1,205]},{12:[1,206]},{9:$Vo,16:$Vp,38:207,59:67,60:$Vq,61:69,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt},{2:$VJ,9:$Vo,12:$VK,16:$Vp,21:151,27:$V6,30:208,31:$V7,33:$V8,34:$V9,35:$Va,38:149,43:147,44:148,45:150,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,59:67,60:$Vq,61:69,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt,84:$VS},{16:[1,209]},{2:$VJ,9:$Vo,12:$VK,16:$Vp,21:151,27:$V6,30:210,31:$V7,33:$V8,34:$V9,35:$Va,38:149,43:147,44:148,45:150,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,59:67,60:$Vq,61:69,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt,84:$VS},o($VU,[2,95]),{16:[1,211]},{16:[1,212]},o($VT,[2,16]),{18:[1,213],56:$Vv,57:$Vw,58:$Vx},{12:[1,214]},{9:$Vo,16:$Vp,38:215,59:67,60:$Vq,61:69,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt},{12:[1,216]},{9:$Vo,16:$Vp,38:219,39:$VV,59:67,60:$Vq,61:69,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt,89:217},{9:$Vo,16:$Vp,38:219,39:$VV,59:67,60:$Vq,61:69,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt,89:220},{10:[1,221]},o($VU,[2,50]),{18:[1,222],56:$Vv,57:$Vw,58:$Vx},o($VU,$VW,{53:223,54:$VX}),{18:[1,225]},{18:[2,98]},{18:[2,99],56:$Vv,57:$Vw,58:$Vx},{18:[1,226]},{2:$VJ,9:$Vo,12:$VK,16:$Vp,21:151,27:$V6,30:227,31:$V7,33:$V8,34:$V9,35:$Va,38:149,43:147,44:148,45:150,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,59:67,60:$Vq,61:69,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt,84:$VS},{19:[1,228]},o($VU,[2,52]),{10:[2,56],52:[1,230],55:229},{19:[1,231]},{19:[1,232]},{12:[1,233]},o($VU,[2,51]),{10:[1,234]},{16:[1,235]},o($VU,[2,96]),o($VU,[2,97]),o($VU,[2,49]),{2:$VJ,9:$Vo,12:$VK,16:$Vp,21:151,27:$V6,30:236,31:$V7,33:$V8,34:$V9,35:$Va,38:149,43:147,44:148,45:150,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,59:67,60:$Vq,61:69,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt,84:$VS},{9:$Vo,16:$Vp,38:237,59:67,60:$Vq,61:69,68:70,73:71,76:72,78:$Vr,79:$Vs,80:$Vt},{12:[1,238]},{18:[1,239],56:$Vv,57:$Vw,58:$Vx},o($VU,$VW,{53:240,54:$VX}),{10:[2,55]},o($VU,[2,53])],
defaultActions: {4:[2,1],9:[2,2],28:[2,10],33:[2,30],34:[2,31],35:[2,32],36:[2,33],37:[2,34],38:[2,35],39:[2,11],40:[2,12],49:[2,8],50:[2,14],51:[2,15],81:[2,28],124:[2,86],134:[2,36],138:[2,88],140:[2,89],141:[2,90],142:[2,91],143:[2,92],161:[2,37],162:[2,93],163:[2,7],166:[2,39],167:[2,40],169:[2,42],170:[2,43],174:[2,47],181:[2,41],183:[2,45],184:[2,46],192:[2,44],218:[2,98],239:[2,55]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const Nodo = require('./nodo_arbol');
    //const Tokens = require('./Tokens');
    tk_tokens = []
    tk_errores = []
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'LAbre'}); return 10; 
break;
case 1: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'LCierra'}); return 12
break;
case 2: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'PAbre'}); return 16
break;
case 3: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'PCierra'}); return 18
break;
case 4: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'SInc'}); return 71
break;
case 5: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'SDec'}); return 72
break;
case 6: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'SMas'}); return 69
break;
case 7: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'SMenos'}); return 70
break;
case 8: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'SPor'}); return 74
break;
case 9: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'SMayorIgual'}); return 64
break;
case 10: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'SMenorIgual'}); return 65
break;
case 11: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'SMayor'}); return 62
break;
case 12: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'SMenor'}); return 63
break;
case 13: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'SDif'}); return 67
break;
case 14: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'SComp'}); return 66
break;
case 15: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'SIgual'}); return 36
break;
case 16: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'Not'}); return 60
break;
case 17: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'And'}); return 57
break;
case 18: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'Or'}); return 56
break;
case 19: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'Xor'}); return 58
break;
case 20: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'CAbre'}); return 28
break;
case 21: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'CCierra'}); return 29
break;
case 22: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'SComa'}); return 42
break;
case 23: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'SPunto'}); return 85
break;
case 24: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'Pyc'}); return 19
break;
case 25: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'Rinterfaz'}); return 13
break;
case 26: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'Rif'}); return 52
break;
case 27: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'Relse'}); return 54
break;
case 28: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'Rpublic'}); return 6
break;
case 29: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'Rimport'}); return 'Rimport'
break;
case 30: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'Rpackage'}); return 'Rpackage'
break;
case 31: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'Rclass'}); return 8
break;
case 32: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'Rinterfaz'}); return 13
break;
case 33: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'Rvoid'}); return 25
break;
case 34: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'Rint'}); return 31
break;
case 35: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'Rdouble'}); return 33
break;
case 36: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'Rchar'}); return 34
break;
case 37: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'Rstring'}); return 27
break;
case 38: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'Rboolean'}); return 35
break;
case 39: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'Rfor'}); return 49
break;
case 40: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'Rwhile'}); return 50
break;
case 41: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'Rsystem'}); return 84
break;
case 42: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'Rout'}); return 86
break;
case 43: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'Rprintln'}); return 90
break;
case 44: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'Rprint'}); return 88
break;
case 45: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'Rdo'}); return 51
break;
case 46: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'Rbreak'}); return 47
break;
case 47: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'Rcontinue'}); return 48
break;
case 48: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'Rreturn'}); return 46
break;
case 49: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'Rstatic'}); return 24
break;
case 50: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'Rmain'}); return 26
break;
case 51: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'Rtrue'}); return 79
break;
case 52: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'Rfalse'}); return 80
break;
case 53: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'Rswitch'}); return 'Rswitch'
break;
case 54: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'Numero'}); return 78
break;
case 55: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'Identificador'}); return 9
break;
case 56: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'ComentarioUni'});
break;
case 57: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'ComentarioMulti'}); 
break;
case 58: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'Texto'}); return 39
break;
case 59: tk_tokens.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,texto:yy_.yytext,nombre:'SDiv'}); return 75
break;
case 60: /*ignorando*/ 
break;
case 61: return 5; 
break;
case 62:  tk_errores.push({linea:yy_.yylloc.first_line, columna:yy_.yylloc.first_column,tipo: 'Lexico', descripcion:'El caracter: '+yy_.yytext+' no pertenece al lenguaje'});
break;
}
},
rules: [/^(?:\s+\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:!=)/,/^(?:==)/,/^(?:=)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\^)/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:\.)/,/^(?:;)/,/^(?:interface\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:public\b)/,/^(?:import\b)/,/^(?:package\b)/,/^(?:class\b)/,/^(?:interfaz\b)/,/^(?:void\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:boolean\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:do\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:static\b)/,/^(?:main\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:switch\b)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[a-zA-Z]([a-zA-Z_0-9])*)/,/^(?:\/\/[\n]*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[\"][^\\\"]*([\\][\\\"ntr][^\\\"]*)*[\"])/,/^(?:\/)/,/^(?:[ \t\n\r\f])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}